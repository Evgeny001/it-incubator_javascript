//Объявление всегда стараться делать через const если пишет, что не переопределяется, то заменить на let
//1. Создание объекта с помощью литерала объекта. У любого объекта структура данных ключ:значение
//ключ - строка, значение - любой из примитивных или сложных типов (другой объект, массив)
//запятая поле каждого свойства
// объект нужен, чтобы какие-то данные держать упакованными и этими данными взаимодействовать
//к упакованным данным можем обратиться через ключ, что бы прочитать значение
//у объекта могут быть вложенные массивы, упакованные внутрь объекта и далее может быть массив примитивов, массив объектов
//В массиве могут сидеть сложные вещи
//как правило все объекты должны иметь id - это как серийный номер у автомобиля / телефона / № паспорта
//тренироваться писать объекты типа: автомобиль (марка, тип, год выпуска, завод в каком городе завод: адрес, название,
//магазин: товары, подкатегории товаров, в каждой подкатегории массив продуктов
//В TS надо писать типизацию для каждого объекта полностью описав все свойства которые есть у объекта и далее присвоить
//эту типизацию объекту через двоеточие
//как вариант: 1. Создать объект во всеми необходимыми свойствами. 2. написать type имя_типизации_объекта = {}
//3. присвоить эту типизацию через двоеточие нашему объекту. 4. описать типы в типизации, а TS будет помогать.
//StydentType - это объект у которого есть определенные свойства и эти свойства надо описать. address - другой подобъект.
//Чтобы описать один большой глобальный объект мы должны иметь типы описания всех объектов, которые вложены в него т.е
//должен быть отдельный тип описывающий объект address, cuty, отдельный тип описывающий объект элемента массива technologies.
//(как у человека описываем: почки, сердце, легкие, а потом уже всего человека который из всего этого состоит)
// можно описывать сверху вниз - встретил объект - типизировал, встретил - типизировал, а можно глазами найти самый
// маленький объект, его типизировать и идти выше.
//technologies - это Array, но всегда важно знать массив чего! JS так спроектирован, что в массив можно положить
//что угодно, но в 99% случаев там что-то однородное, одной структуры, Array - это обобщенное название ==> надо указать,
//что именно будет сидеть в массиве, и далее этот тип описать.
//Типизация это именно TS штука, это то что сверху JS, нечто дополнительное!
//В переменную student можно положить только объекты соответствующие типу StydentType и это будет контролироваться
//особенно это удобно, когда объекты создаются многократно в разных местах и важно проконтролировать, что бы объект был
// создан и упакован правильно ==> создавать типизацию, чтобы потом можно было использовать при описании объекта и не ошибиться.
//При описании типов можно ставить запятую, можно ставить точку с запятой, можно ничего не ставить, Д рекомендует ничего
// не ставить, чтобы понимать что это не объект, т.к. в объектах обязаны ставить запятые.
//Итог: объект - набор данных ключ значение, объекты могут быть вложенные, часто могут лежать в массивах,
//ДЛЯ КАЖДОГО ОБЪЕКТА НАСКОЛЬКО МАЛЕНЬКИМ БЫ ОН НЕ БЫЛ, СОСТОЯЩИМ ДАЖЕ ИЗ ОДНОГО СВОЙСТВА НАДО ОПИСЫВАТЬ ОТДЕЛЬНО ТИПЫ.
//ЧТО БЫ СОСТАВИТЬ ТИП БОЛЬШОГО ОБЪЕКТА, СНАЧАЛА ДОЛЖНЫ ТИПИЗИРОВАТЬ МАЛЕНЬКИЕ ПОДЪЕОБЪЕКТЫ.
type LocalCityType = {
    title: string
    country: string              
}
type aAddressType = {
    streetTitle: string
    city: LocalCityType               //city является типом CityType, который мы описали выше.
}
type TeahType = {
    id: number
    title: string
}
export type StydentType = {
    name: string
    age: number
    isActive: boolean
    address: aAddressType
    technologies: Array<TeahType>
    // technologies: TeahType[]
}
export const student: StydentType = {
    name: "Dimych",
    age: 32,
    isActive: false,
    address: {
        streetTitle: "Surganova 2",
        city: {
            title: "Minsk",
            country: "Belarus"
        }
    },
    technologies: [
        {
            id: 1,
            title: "HTML"
        }, {
            id: 2,
            title: "CSS"
        }, {
            id: 3,
            title: "React"
        }

    ]
}
console.log(student.address.city.title)       //Minsk
console.log(student.technologies[2].title)   //React
